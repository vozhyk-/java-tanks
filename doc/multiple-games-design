Variant 1 chosen as the simpler and more extensible one.

1: client can selects a game with a new command
  client: connect to server
    -> Join(nickname)   // try to join a *random* game
    <- JoinReply        // everything as usual, but the server assigns
                        // the client to the game it has joined
    ...

  choosing a particular game (to be implemented later):
  client: connect to server
    -> GetGames
    <- list(GameDesc)
    -> SetGame(gameId)
    -> Join(nickname)
    <- JoinReply
    ...

+ simpler to implement
- legacy clients can only join a random game


2: a directory-server directs clients to the appropriate game-server
  client: connect to dir-server
    -> GetGames
    <- list(GameDesc)
  client: connect to game-server at
  (the chosen game's) gameDesc.(address, port)
    ...

+ choosing a game with a legacy client is possible by trying different
  ports
+ a directory-server client can be a separate program (for non-Java
  implementations)
- more ports used on the server
  - hard to add support for having games on the same port as the
    directory-server while allowing clients with the directory-client
    and game-client as separate programs to join them (it would
    require the game-client to reuse the dir-server connection or to
    use something like the SetGame command, which would be the same as
    using variant 1 anyway)
- takes longer to implement
